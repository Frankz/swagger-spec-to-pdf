#!/usr/bin/env node
"use strict";

var ArgumentParser = require('argparse').ArgumentParser;
var cli = new ArgumentParser({
  prog:           "swagger2pdf",
  version:        require('../package.json').version,
  addHelp:        true
});
cli.addArgument(['-s', '--src'], {
  help:   'Swagger spec JSON file.'
});
cli.addArgument(['-o', '--output'], {
  help:   'Output path of the pdf file.'
});

var libPath = require('path');
var libFs = require('fs');
var libCp = require('child_process');
var libYaml = require('yaml-js');

var rootPath = process.cwd();
var editorPath = libPath.join(__dirname, '..', 'swagger-editor');
var editorSpecPath = libPath.join(editorPath, 'spec-files');
var httpServerPath = null; // not initialized here
var electronScript = libPath.join(__dirname, '..', 'src', 'electron_exec.js');
var electronPath = require('electron-prebuilt');

var parsePath = function(input) {
  if (input == '-') return '-';
  var output;
  if (!(input != null)) {
    return rootPath;
  }
  output = libPath.normalize(input);
  if (output.length === 0) {
    return rootPath;
  }
  if (output.charAt(0) !== '/') {
    output = libPath.normalize(rootPath + '/./' + output);
  }
  if (output.length > 1 && output.charAt(output.length - 1) === '/') {
    return output.substr(0, output.length - 1);
  }
  return output;
};

try {
  var options = cli.parseArgs();
  var src = parsePath(options.src);
  var output = parsePath(options.output);

  // ensure source file
  var srcStatus = libFs.statSync(src);
  if (!srcStatus || !srcStatus.isFile()) {
    process.stderr.write('Source swagger spec json not found: ' + src);
  }

  // ensure output dir
  var outputStatus = libFs.statSync(output);
  if (!outputStatus || !outputStatus.isDirectory()) {
    process.stderr.write('Output dir not found: ' + output);
  }

  // ensure http-server bin path, since npm v3.x no longer support nested node_modules dir
  libCp.exec('npm bin', function(error, stdout) {
    if (error) {
      throw error;
    }
    httpServerPath = libPath.join(stdout.trim(), 'http-server');
  });

  // read json spec & dump converted yaml into swagger editor spec dir
  var specJson = JSON.parse(libFs.readFileSync(src));
  libFs.writeFileSync(libPath.join(editorSpecPath, 'default.yaml'), libYaml.dump(specJson));

  // start http server serving the editor site
  var httpServerSpawned = false;
  var httpServerProcess = null;
  var httpServerPathWatcher = setInterval(function() {
    if (!httpServerPath) {
      return;
    }
    clearInterval(httpServerPathWatcher);

    httpServerProcess = libCp.spawn(httpServerPath, [editorPath, '-p 19849', '-c -1']);
    httpServerProcess.stdout.on('data', function(data) {
      console.log(data.toString());
      httpServerSpawned = true;
    });
  }, 100); // 0.1s

  var watcher = setInterval(function() {
    if (!httpServerSpawned) {
      return;
    }
    clearInterval(watcher);

    var electronProcess = libCp.spawn(electronPath, [electronScript, output]);
    electronProcess.stdout.on('data', function(data) {
      console.log(data.toString());
    });
    electronProcess.on('close', function(code) {
      httpServerProcess.kill();
      if (0 === code) {
        console.log('Done.');
      } else {
        process.stderr.write('Failed in executing electron script.');
      }
    });
  }, 100); // 0.1s

} catch (err) {
  process.stderr.write((err.message ? err.message : err) + "\n");
}
